            push    0.0     ; [m]
            push    1.0     ; [m, d]
            push    1.0     ; [m, d, e]
            push    0       ; [m, d, e, n]
loop:       copy    3       ; [m, d, e, n, n]
            push    10      ; [m, d, e, n, n, 10]
            lti             ; [m, d, e, n, n<10]
            jpz     end     ; [m, d, e, n]

            push    1.0     ; [m, d, e, n, 1.0]
            push    1.0     ; [m, d, e, n, 1.0, 1.0]
            copy    0       ; [m, d, e, n, 1.0, 1.0, m]
            addf            ; [m, d, e, n, 1.0, 1.0+m]
            copy    5       ; [m, d, e, n, 1.0, 1.0+m, 1.0+m]
            put     0       ; [1.0+m, d, e, n, 1.0, 1.0+m]
            copy    1       ; [1.0+m, d, e, n, 1.0, 1.0+m, d]
            mulf            ; [1.0+m, d, e, n, 1.0, (1.0+m)*d]
            copy    5       ; [1.0+m, d, e, n, 1.0, (1.0+m)*d, (1.0+m)*d]
            put     1       ; [1.0+m, (1.0+m)*d, e, n, 1.0, (1.0+m)*d]
            divf            ; [1.0+m, (1.0+m)*d, e, n, 1.0/((1.0+m)*d)]
            copy    2       ; [1.0+m, (1.0+m)*d, e, n, 1.0/((1.0+m)*d), e]
            addf            ; [1.0+m, (1.0+m)*d, e, n, (1.0/((1.0+m)*d))+e]
            put     2       ; [1.0+m, (1.0+m)*d, (1.0/((1.0+m)*d))+e, n]

            push    1       ; [1.0+m, (1.0+m)*d, (1.0/((1.0+m)*d))+e, n, 1]
            addi            ; [1.0+m, (1.0+m)*d, (1.0/((1.0+m)*d))+e, n+1]
            jump    loop    ; [1.0+m, (1.0+m)*d, (1.0/((1.0+m)*d))+e, n+1]

end:        top     -1      ; [m, d, e]
            native  3       ; [m, d]        NATIVE_PRINTF
            push    10      ; [m, d, '\n']
            native  1       ; [m, d]        NATIVE_PRINTC
            halt
