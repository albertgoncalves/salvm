            push    0           ; [l0]

loop:       copy    0           ; [l0, l0]
            push    10          ; [l0, l0, 10]
            lti                 ; [l0, l0<10]
            jpz     exit        ; [l0]

            push    3           ; [l0, 3]
            copy    0           ; [l0, 3, l0]
            call    ackermann   ; [l0, r0]
            native  2           ; [l0]          NATIVE_PRINTI
            push    10          ; [l0, '\n']
            native  1           ; [l0]          NATIVE_PRINTC
            push    1           ; [l0, 1]
            addi                ; [l0+1]
            jump    loop        ; [l0+1]

exit:       halt                ; [l0+10]

ackermann:  base                ; [..., a0, a1, i, b]
            frame   4           ; [a0, a1, i, b]

tail_call:  copy    0           ; [a0, a1, i, b, a0]
            push    0           ; [a0, a1, i, b, a0, 0]
            eq                  ; [a0, a1, i, b, a0==0]
            jpz     else_if     ; [a0, a1, i, b]

            copy    1           ; [a0, a1, i, b, a1]
            push    1           ; [a0, a1, i, b, a1, 1]
            addi                ; [a0, a1, i, b, a1+1]
            put     0           ; [a1+1, a1, i, b]
            copy    2           ; [a1+1, a1, i, b, i]
            put     1           ; [a1+1, i, i, b]
            put     2           ; [a1+1, i, b]
            reset               ; [..., a1+1, i]
            ret                 ; [..., a1+1]

else_if:    copy    1           ; [a0, a1, i, b, a1]
            push    0           ; [a0, a1, i, b, a1, 0]
            eq                  ; [a0, a1, i, b, a1==0]
            jpz     else        ; [a0, a1, i, b]

            push    1           ; [a0, a1, i, b, 1]
            jump    end         ; [a0, a1, i, b, 1]

else:       copy    0           ; [a0, a1, i, b, a0]
            copy    1           ; [a0, a1, i, b, a0, a1]
            push    1           ; [a0, a1, i, b, a0, a1, 1]
            subi                ; [a0, a1, i, b, a0, a1-1]
            call    ackermann   ; [a0, a1, i, b, r0]

end:        put     1           ; [a0, ?, i, b]
            copy    0           ; [a0, ?, i, b, a0]
            push    1           ; [a0, ?, i, b, a0, 1]
            subi                ; [a0, ?, i, b, a0-1]
            put     0           ; [a0-1, ?, i, b]
            jump    tail_call   ; [a0-1, ?, i, b]
